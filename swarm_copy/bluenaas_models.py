# generated by datamodel-codegen:
#   filename:  https://openbluebrain.com/api/bluenaas/openapi.json
#   timestamp: 2024-11-13T15:10:19+00:00
"""Pydantic models of the BlueNaaS API."""

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class BodyPlaceSynapsesApiBluenaasValidationSynapseFormulaPost(BaseModel):
    """Placeholder."""

    formula: Annotated[str, Field(title="Formula")]


class BrainRegion(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    label: Annotated[str, Field(title="Label")]


class DeprecateNexusResponse(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    deprecated: Annotated[bool, Field(title="Deprecated")]
    updated_at: Annotated[datetime, Field(title="Updated At")]


class ExclusionRule(BaseModel):
    """Placeholder."""

    distance_soma_gte: Annotated[Optional[float], Field(title="Distance Soma Gte")] = (
        None
    )
    distance_soma_lte: Annotated[Optional[float], Field(title="Distance Soma Lte")] = (
        None
    )


class ExperimentSetupConfig(BaseModel):
    """Placeholder."""

    celsius: Annotated[float, Field(title="Celsius")]
    vinit: Annotated[float, Field(title="Vinit")]
    hypamp: Annotated[float, Field(title="Hypamp")]
    max_time: Annotated[float, Field(le=3000.0, title="Max Time")]
    time_step: Annotated[float, Field(title="Time Step")]
    seed: Annotated[int, Field(title="Seed")]


class RecordingLocation(BaseModel):
    """Placeholder."""

    section: Annotated[str, Field(title="Section")]
    offset: Annotated[float, Field(ge=0.0, le=1.0, title="Offset")]


class SectionTarget(RootModel[Literal["apic", "basal", "dend", "soma", "axon"]]):
    """Placeholder."""

    root: Annotated[
        Literal["apic", "basal", "dend", "soma", "axon"], Field(title="SectionTarget")
    ]


class SimulationStimulusConfig(BaseModel):
    """Placeholder."""

    stimulus_type: Annotated[
        Literal["current_clamp", "voltage_clamp", "conductance"],
        Field(title="Stimulus Type"),
    ]
    stimulus_protocol: Annotated[
        Optional[Literal["ap_waveform", "idrest", "iv", "fire_pattern"]],
        Field(title="Stimulus Protocol"),
    ] = None
    amplitudes: Annotated[Union[List[float], float], Field(title="Amplitudes")]


class StimulationItemResponse(BaseModel):
    """Placeholder."""

    x: Annotated[List[float], Field(title="X")]
    y: Annotated[List[float], Field(title="Y")]
    name: Annotated[str, Field(title="Name")]
    amplitude: Annotated[float, Field(title="Amplitude")]


class StimulationPlotConfig(BaseModel):
    """Placeholder."""

    stimulus_protocol: Annotated[
        Optional[Literal["ap_waveform", "idrest", "iv", "fire_pattern"]],
        Field(title="Stimulus Protocol"),
    ] = None
    amplitudes: Annotated[List[float], Field(title="Amplitudes")]


class SynapseConfig(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    target: Optional[SectionTarget] = None
    type: Annotated[int, Field(title="Type")]
    distribution: Annotated[
        Literal["exponential", "linear", "formula"], Field(title="Distribution")
    ]
    formula: Annotated[Optional[str], Field(title="Formula")] = None
    soma_synapse_count: Annotated[Optional[int], Field(title="Soma Synapse Count")] = (
        None
    )
    seed: Annotated[int, Field(title="Seed")]
    exclusion_rules: Annotated[
        Optional[List[ExclusionRule]], Field(title="Exclusion Rules")
    ] = None


class SynapsePlacementBody(BaseModel):
    """Placeholder."""

    seed: Annotated[int, Field(title="Seed")]
    config: SynapseConfig


class SynapsePosition(BaseModel):
    """Placeholder."""

    segment_id: Annotated[int, Field(title="Segment Id")]
    coordinates: Annotated[List[float], Field(title="Coordinates")]
    position: Annotated[float, Field(title="Position")]


class Frequency(RootModel[float]):
    """Placeholder."""

    root: Annotated[float, Field(gt=0.0, title="Frequency")]


class FrequencyItem(RootModel[float]):
    """Placeholder."""

    root: Annotated[float, Field(gt=0.0)]


class SynapseSimulationConfig(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    delay: Annotated[int, Field(title="Delay")]
    duration: Annotated[int, Field(le=3000, title="Duration")]
    frequency: Annotated[
        Union[Frequency, List[FrequencyItem]], Field(title="Frequency")
    ]
    weight_scalar: Annotated[float, Field(gt=0.0, title="Weight Scalar")]


class UsedModel(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    type: Annotated[
        Literal["me-model", "synaptome", "m-model", "e-model"], Field(title="Type")
    ]
    name: Annotated[str, Field(title="Name")]


class ValidationError(BaseModel):
    """Placeholder."""

    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class CurrentInjectionConfig(BaseModel):
    """Placeholder."""

    inject_to: Annotated[str, Field(title="Inject To")]
    stimulus: SimulationStimulusConfig


class HTTPValidationError(BaseModel):
    """Placeholder."""

    detail: Annotated[Optional[List[ValidationError]], Field(title="Detail")] = None


class MEModelResponse(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    type: Annotated[
        Literal["me-model", "synaptome", "m-model", "e-model"], Field(title="Type")
    ]
    created_by: Annotated[str, Field(title="Created By")]
    created_at: Annotated[datetime, Field(title="Created At")]
    brain_region: BrainRegion
    m_model: UsedModel
    e_model: UsedModel


class SectionSynapses(BaseModel):
    """Placeholder."""

    section_id: Annotated[str, Field(title="Section Id")]
    synapses: Annotated[List[SynapsePosition], Field(title="Synapses")]


class SingleNeuronSimulationConfigInput(BaseModel):
    """Placeholder."""

    synaptome: Annotated[
        Optional[List[SynapseSimulationConfig]], Field(title="Synaptome")
    ] = None
    current_injection: CurrentInjectionConfig
    record_from: Annotated[List[RecordingLocation], Field(title="Record From")]
    conditions: ExperimentSetupConfig
    type: Annotated[
        Literal["single-neuron-simulation", "synaptome-simulation"], Field(title="Type")
    ]
    duration: Annotated[int, Field(title="Duration")]


class SingleNeuronSimulationConfigOutput(SingleNeuronSimulationConfigInput):
    """Placeholder."""

    pass


class SynapsePlacementResponse(BaseModel):
    """Placeholder."""

    synapses: Annotated[List[SectionSynapses], Field(title="Synapses")]


class SynaptomeModelResponse(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    type: Annotated[
        Literal["me-model", "synaptome", "m-model", "e-model"], Field(title="Type")
    ]
    created_by: Annotated[str, Field(title="Created By")]
    created_at: Annotated[datetime, Field(title="Created At")]
    brain_region: BrainRegion
    me_model: UsedModel
    synapses: Annotated[List[SynapseConfig], Field(title="Synapses")]


class PaginatedResponseUnionMEModelResponseSynaptomeModelResponse(BaseModel):
    """Placeholder."""

    offset: Annotated[int, Field(title="Offset")]
    page_size: Annotated[int, Field(title="Page Size")]
    total: Annotated[int, Field(title="Total")]
    results: Annotated[
        List[Union[MEModelResponse, SynaptomeModelResponse]], Field(title="Results")
    ]


class SimulationDetailsResponse(BaseModel):
    """Placeholder."""

    id: Annotated[str, Field(title="Id")]
    status: Annotated[
        Optional[Literal["pending", "started", "success", "failure"]],
        Field(title="Status"),
    ] = None
    results: Annotated[Optional[Dict[str, Any]], Field(title="Results")] = None
    error: Annotated[Optional[str], Field(title="Error")] = None
    type: Annotated[
        Literal["single-neuron-simulation", "synaptome-simulation"], Field(title="Type")
    ]
    name: Annotated[str, Field(title="Name")]
    description: Annotated[str, Field(title="Description")]
    created_by: Annotated[str, Field(title="Created By")]
    created_at: Annotated[datetime, Field(title="Created At")]
    injection_location: Annotated[str, Field(title="Injection Location")]
    recording_location: Annotated[
        Union[List[str], str], Field(title="Recording Location")
    ]
    brain_region: BrainRegion
    config: Optional[SingleNeuronSimulationConfigOutput] = None
    me_model_id: Annotated[str, Field(title="Me Model Id")]
    synaptome_model_id: Annotated[Optional[str], Field(title="Synaptome Model Id")] = (
        None
    )


class PaginatedResponseSimulationDetailsResponse(BaseModel):
    """Placeholder."""

    offset: Annotated[int, Field(title="Offset")]
    page_size: Annotated[int, Field(title="Page Size")]
    total: Annotated[int, Field(title="Total")]
    results: Annotated[List[SimulationDetailsResponse], Field(title="Results")]
